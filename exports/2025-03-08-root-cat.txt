./README.md
==== Content of ./README.md ====
# Equation Plotter CLI

## Overview

Equation Plotter CLI is a versatile command-line tool designed to generate accurate plots of mathematical functions. It supports multiple plot types—including quadratic, linear, sine, cosine, tangent, polar, exponential, and logarithmic—and offers various output formats such as SVG, JSON, CSV, Markdown, ASCII, and HTML. Advanced analysis features like area computation, derivative analysis, scaling, inversion, smoothing, and statistical analysis (including median and mode computations) further empower users to interpret and transform plot data.

"Be a go-to plot library with a CLI, be the jq of formulae visualisations."

## Features

- **Diverse Plots:** Supports quadratic, linear, sine, cosine, tangent, polar, exponential, and logarithmic functions.
- **Multiple Output Formats:** Export plots in SVG, JSON, CSV, Markdown, ASCII, or HTML formats.
- **Advanced Analysis:** Compute summary statistics, averages, area (via trapezoidal rule), derivatives (finite differences), reflection, scaling, inversion, smoothing (moving average), standard deviation, median, and mode.
- **Enhanced Quadratic Parsing:** Robust quadratic formula parsing with improved helper functions.
- **3D Rotating Plots:** Generate and rotate 3D helix plots with 2D projection capabilities.
- **Gradient Plot Feature:** Create plots with gradient colored strokes for enhanced visual effect using the new `plotGradient` function.
- **New Helper Function:** Added `mapToSvgCoordinates` to simplify SVG coordinate mapping and reduce code duplication.
- **Interactive CLI and Web Interface:** Use the interactive command-line mode or launch an Express-based web interface.
- **Clean Code and Testing:** Refined code structure with comprehensive test coverage.

## Getting Started

### Installation

Ensure you have Node.js (>=20) installed. Clone the repository and install dependencies:

```bash
npm install
```

### Usage

Generate a plot by specifying the output filename and formula string:

```bash
node src/lib/main.js output.svg "quad:1,0,0,-10,10,1"
```

For expression-based plotting:

```bash
node src/lib/main.js output.svg "expr:2*x+3:-10,10,1"
```

For interactive mode:

```bash
node src/lib/main.js --interactive
```

To start the web interface:

```bash
node src/lib/main.js --serve
```

Additional flags include:

- `--json` for JSON output
- `--csv` for CSV output
- `--md` for Markdown output
- `--html` for HTML output
- `--ascii` for ASCII art
- `--grid` to overlay grid lines on SVG plots
- `--stats` to display summary statistics
- `--rotate [angle]` to rotate the plot by a given angle (in degrees)
- `--help` or `-h` for help
- `--version` for version information

## Extended Transformations and Analysis

New helper functions have been added to extend analytical capabilities:

- **smoothPlot:** Applies moving average smoothing to plot data.
- **computeStandardDeviation:** Calculates the standard deviation of y-values in the plot points.
- **computeMedian and computeMode:** New statistical functions to compute the median and mode of the plot's y-values.
- **plotGradient:** Generates a gradient-colored polyline for enhanced visual presentation of plots.
- **mapToSvgCoordinates:** Simplifies the mapping of data points to SVG coordinates and reduces code duplication.

## Enhanced Quadratic Parsing

The functions `extractQuadraticCoefficients` and `invertExpression` have been updated for robust parsing and inversion of quadratic expressions.

## 3D Rotating Plots

Use the prefix `3d:helix` (optionally with the `--rotate` flag) to generate a 3D helix plot that is rotated and projected onto a 2D plane.

## Change Log

- **Documentation Updated:** README refreshed in accordance with CONTRIBUTING.md guidelines.
- **Enhanced Parsing:** Improved quadratic parsing and inversion functions.
- **New Features:**
  - Added `scalePlot`, `invertPlot`, `smoothPlot`, `computeStandardDeviation`, `computeMedian`, and `computeMode` for advanced plot analysis.
  - Added `plotGradient` to render gradient colored plots.
  - **Added `mapToSvgCoordinates` helper function to reduce duplicate code in SVG coordinate mapping.**
- **Interface Improvements:** Enhanced CLI and web interface with updated interactive functionality.
- **Code Drift Pruned:** Redundant and legacy code segments have been removed to align with the Mission Statement.

## Contributing

Please refer to [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines on how to contribute. Your input is valuable to keeping this project aligned with its mission.

## License

MIT
./CONTRIBUTING.md
==== Content of ./CONTRIBUTING.md ====
# Contributing

Contributing guidelines here apply to human and chat completion developers.
This repository uses the intentïon agentic‑lib for automated workflows. See: [intentïon agentic‑lib](https://github.com/xn-intenton-z2a/agentic-lib)

# Mission Statement

_"Be a go-to plot library with a CLI, be the jq of formulae visualisations."_

## Project goals

# Equation Plotter Features Summary

- **Mathematical Functions:**  
  Supports plotting of quadratic, linear, sine, cosine, polar, exponential, and logarithmic functions.

- **Multiple Output Formats:**  
  Generates plots in SVG, JSON, CSV, Markdown, ASCII, and HTML formats.

- **Custom Range Function:**  
  Uses an in-house range generator to produce number sequences without external libraries.

- **Flexible CLI:**  
  Offers a command-line interface with options for default demo mode, interactive mode, and various flags (e.g., --grid, --json, --csv, --ascii, --md, --html) for customizing output.

- **CLI demo:**
  Keep a short reliable demo that will run from `node run start`.

## The Automated Contribution Process

Our contribution workflow is fully automated—your role is simple:

1. **Open an Issue:**  
   Describe your idea, report a bug, or suggest an improvement by opening an issue in our repository.

2. **Label It as `automated`:**  
   Add the `automated` label to your issue. This is the trigger that starts our workflow.

3. **Automation Takes Over:**  

## Agentic contribution house choice options (programmatically parsed): START

Workflow schedule: schedule-1

## Issue House Choice Options

repository specific activities:
- Create, vary or extend as many library functions as you can that deliver the spirit of this CONTRIBUTING.md Update the Change Log in README.md (or say what was checked).

generic activities:
- Update the source file by applying the Mission Statement to prune any "drift" from the source file. Update the Change Log in README.md (or say what was checked).
- Create, vary or extend as many features in the source file as you can inline with the Mission Statement. Update the Change Log in README.md (or say what was checked).
  #- Find anything that might be a "simulated" or "demo" implementation and switch to a real implementation. Update the Change Log in README.md (or say what was checked).
  #- Consider alternate code paths that could be explicitly handled to improve the range of supported behaviours. Update the Change Log in README.md (or say what was checked).
  #- Look for code that could be simplified using a library and introduce that library. Update the Change Log in README.md (or say what was checked).

undocumented chores:
#- Look for any duplicated code that could be usefully abstracted out to become shared code and implement that abstraction.
- Refresh the README, consulting the guidance in CONTRIBUTING.md while retaining any relevant content and pruning irrelevant content.
  #- Dry-run any examples in comments or the README against the current code and if they are not accurate or if they could cover more features, update the docs or code to be accurate.
- Bring test coverage up as close to 100% as possible, have single layer mocked tests and deeper tests mocking at the external resource (e.g. file system or network).
  #- Ensure the main function so that it generates some demo output without an over the wire call, and hint a CLI switch that will do the real call.

## Agentic contribution house choice options (programmatically parsed): END
./package.json
==== Content of ./package.json ====
{
  "name": "@xn-intenton-z2a/repository0-plot-code-lib",
  "version": "0.3.1-0",
  "description": "A versatile CLI tool to accurately plot mathematical functions with flexible output formats and advanced analysis features including area computations, derivative analysis, scaling, inversion, enhanced quadratic parsing, and pruned redundant code in line with its Mission Statement.",
  "type": "module",
  "main": "src/lib/main.js",
  "scripts": {
    "build": "echo 'Nothing to build'",
    "formatting": "prettier --check .",
    "formatting-fix": "prettier --write .",
    "linting": "eslint .",
    "linting-json": "eslint --format=@microsoft/eslint-formatter-sarif .",
    "linting-fix": "eslint --fix .",
    "update-to-minor": "npx npm-check-updates --upgrade --enginesNode --target minor --verbose --install always",
    "update-to-greatest": "npx npm-check-updates --upgrade --enginesNode --target greatest --verbose --install always --reject 'alpha'",
    "test": "vitest tests/unit/*.test.js",
    "test:unit": "vitest --coverage tests/unit/*.test.js",
    "start": "node src/lib/main.js"
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "dotenv": "^16.4.7",
    "openai": "^4.86.2",
    "zod": "^3.24.2",
    "express": "^4.18.2",
    "mathjs": "^14.3.1"
  },
  "devDependencies": {
    "@microsoft/eslint-formatter-sarif": "^3.1.0",
    "@vitest/coverage-v8": "^3.0.8",
    "eslint": "^9.19.0",
    "eslint-config-google": "^0.14.0",
    "eslint-config-prettier": "^10.1.1",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.3",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.2",
    "markdown-it": "^14.1.0",
    "markdown-it-github": "^0.5.0",
    "npm-check-updates": "^17.1.15",
    "prettier": "^3.5.3",
    "vitest": "^3.0.8"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "files": [
    "package.json"
  ],
  "publishConfig": {
    "registry": "https://npm.pkg.github.com"
  }
}
./vitest.config.js
==== Content of ./vitest.config.js ====
import { defineConfig } from "vitest/config";

export default defineConfig({
  resolve: {
    alias: {
      "@dist": "/dist",
      "@src": "/src",
      "@tests": "/tests",
    },
  },
  test: {
    environment: "node",
    include: ["src/lib/main.js", "tests/unit/*.test.js"],
    coverage: {
      provider: "v8",
      reportsDirectory: "./coverage",
      reporter: ["text", "json", "html"],
      include: ["src/**/*.js"],
      exclude: ["**/dist/**", "**/entrypoint/**", "**/tests/**", "**/node_modules/**", "src/index.js", "**/exports/**"],
      threshold: {
        statements: 85,
        branches: 80,
        functions: 75,
        lines: 85,
        perFile: {
          statements: 70,
          branches: 60,
          functions: 40,
          lines: 70,
        },
      },
    },
  },
});
./jsconfig.json
==== Content of ./jsconfig.json ====
{
  "compilerOptions": {
    "baseUrl": ".",
    "// Also make path changes in vitest.config.js": "",
    "paths": {
      "@dist/*": ["dist/*"],
      "@src/*": ["src/*"],
      "@tests/*": ["tests/*"]
    }
  }
}
./eslint.config.js
==== Content of ./eslint.config.js ====
import js from "@eslint/js";
import google from "eslint-config-google";
import eslintPluginPrettierRecommended from "eslint-plugin-prettier/recommended";
import globals from "globals";
import promise from "eslint-plugin-promise";
import security from "eslint-plugin-security";
import sonarjs from "eslint-plugin-sonarjs";
import react from "eslint-plugin-react";
import importPlugin from "eslint-plugin-import";

const modifiedGoogleConfig = { ...google, rules: { ...google.rules } };
delete modifiedGoogleConfig.rules["valid-jsdoc"];
delete modifiedGoogleConfig.rules["require-jsdoc"];

/** @type {import('eslint').Linter.FlatConfig[]} */
export default [
  js.configs.recommended,
  modifiedGoogleConfig,
  eslintPluginPrettierRecommended,
  {
    plugins: {
      promise,
      security,
      sonarjs,
      react,
      import: importPlugin,
    },
    languageOptions: {
      ecmaVersion: 2023,
      sourceType: "module",
      globals: {
        ...globals.node,
      },
    },
    rules: {
      "prettier/prettier": "error",
      ...promise.configs.recommended.rules,
      ...sonarjs.configs.recommended.rules,
      "sonarjs/os-command": "off",

      // Formatting and organisation
      "no-unused-vars": ["error", { argsIgnorePattern: "^_" }],
      "no-extra-semi": 2,
      "object-curly-newline": ["error", { consistent: true }],
      "array-element-newline": ["error", "consistent", { multiline: true, minItems: 10 }],
      "import/newline-after-import": ["error", { count: 1 }],
      "camelcase": "off",

      // ESM import rules
      "import/no-amd": "error",
      "import/no-commonjs": "error",
      "import/no-import-module-exports": "error",
      "import/no-cycle": "error",
      "import/no-dynamic-require": "error",
      "import/no-self-import": "off",
      "import/no-unresolved": "off",
      "import/no-useless-path-segments": "error",
      "import/no-duplicates": "error",
      "sonarjs/fixme-tag": "warn",
    },
  },
  {
    files: ["**/*.js"],
    ignores: ["**/tests/**/*.js", "**/*.test.js", "eslint.config.js"],
    rules: {
      ...security.configs.recommended.rules,
      "security/detect-non-literal-fs-filename": "off",
      "security/detect-non-literal-regexp": "off",
      "security/detect-object-injection": "off",
    },
  },
  {
    settings: {
      react: {
        version: "18",
      },
    },
  },
  {
    ignores: ["build/", "coverage/", "dist/", "exports/", "node_modules/", "eslint.config.js"],
  },
];
./.prettierrc
==== Content of ./.prettierrc ====
{
  "singleQuote": false,
  "trailingComma": "all",
  "printWidth": 120,
  "tabWidth": 2,
  "useTabs": false,
  "quoteProps": "consistent",
  "overrides": [
    {
      "files": ".prettierrc",
      "options": { "parser": "json" }
    }
  ]
}
./LICENSE
==== Content of ./LICENSE ====
MIT License

Copyright (c) 2025 intentïon

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
./.prettierrc
==== Content of ./.prettierrc ====
{
  "singleQuote": false,
  "trailingComma": "all",
  "printWidth": 120,
  "tabWidth": 2,
  "useTabs": false,
  "quoteProps": "consistent",
  "overrides": [
    {
      "files": ".prettierrc",
      "options": { "parser": "json" }
    }
  ]
}
